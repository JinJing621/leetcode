{\rtf1\ansi\ansicpg936\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public String longestPalindrome(String s) \{\
        int length = s.length();\
        int center = 0;\
        int maxSubStr = 1;\
        for(int i=0; i<length; i++)\{\
            int j=1;\
            for(j=1; j<=Math.min(i, length-1-i); j++)\{\
                if(s.charAt(i-j) != s.charAt(i+j))\{\
                    break;\
                \}\
            \}\
            if(maxSubStr < 2*(j-1)+1)\{\
                    maxSubStr = 2*(j-1)+1;\
                    center = i;\
                \}\
        \}\
        for(int i=0; i<length-1; i++)\{\
            if(s.charAt(i) != s.charAt(i+1))\{\
                continue;\
            \}\
            int j=1;\
            for(j=1; j<=Math.min(i, length-2-i); j++)\{\
                if(s.charAt(i-j) != s.charAt(i+1+j))\{\
                    break;\
                \}\
            \}\
            if(maxSubStr < 2*j)\{\
                    maxSubStr = 2*j;\
                    center = i;\
                \}\
        \}\
        if(maxSubStr%2 != 0)\{\
            return s.substring(center-maxSubStr/2, center+maxSubStr/2+1);\
        \}else\{\
            return s.substring(center-maxSubStr/2+1, center+maxSubStr/2+1);\
        \}  \
    \}\
\}}